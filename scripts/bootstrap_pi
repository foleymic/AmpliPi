#!/usr/bin/env bash
# Install AmpliPi from scratch on a new pi compute module
# This script is mainly intended for MicroNova employees to bringup Pi's. Your AmpliPi device should already have this configuration.

# stop on errors
set -e

# feel free to change these or better yet make them parameters
fallback_ip=192.168.0.101
hostname=${2:-amplipi}
diskpath=${1:-/dev/sda}

only_list_disks=0
if [[ $# < 1 ]]; then
  printf "Usage: bootstrap_pi diskpath [hostname]\n\n"
  printf "diskpath should be /dev/sdX.\n"
  printf "This script will exit after connecting to the pi and listing disks.\n"
  read -p "Press any key to continue" -n 1
  only_list_disks=1
fi

amplipi_config_dir=$(dirname "${BASH_SOURCE[0]}/../config")

# do all of this stuff in a temporary directory so it will be lost/erased on reboot
pushd $(mktemp --directory)

echo "Downloading Raspberry Pi boot"
git clone --depth=1 https://github.com/raspberrypi/usbboot

echo "Installing Raspberry Pi boot"
pushd usbboot

# install dependencies as necessary
inst=0
for dep in libusb-1.0-0-dev make gcc; do
  dpkg-query -s $dep >/dev/null || inst=1
done
if [[ $inst == 1 ]]; then
  sudo apt update
  sudo apt install libusb-1.0-0-dev make gcc
else
  sudo -n true # request sudo password now to avoid confusion later
fi

make

echo -e "\nPlug in a usb cable from the service port to your computer. Keep AmpliPi Unplugged / Powered OFF for now."
read -p "Press any key to continue" -n 1
echo  # newline
read -p "Press any key and then plug in the AmpliPi" -n 1
sudo ./rpiboot
popd # usbboot

if [[ $only_list_disks > 0 ]]; then
  sleep 2 # TODO: how to determine the disk has been attached?
  printf "\nListing available disks.\n"
  printf "The pi should be the last /dev/sdX.\n\n"
  lsblk
  exit 0
fi

release=2020-08-20-raspios-buster-armhf-lite
echo "Downloading and extracting Raspberry Pi OS"
if [[ -f $HOME/Downloads/$release.zip ]] ; then
  zip_file=$HOME/Downloads/$release.zip
else
  wget http://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2020-08-24/$release.zip
  cp $release.zip ~/Downloads # save for later
  zip_file=$release.zip
fi
mkdir $release
pushd $release
unzip $zip_file

if [[ -e $diskpath ]]; then
  echo "Valid $diskpath device found"
elif [[ ! -e $diskpath ]]; then
  echo "ERROR: Expected device $diskpath not found"
  exit 1
else
  echo "ERROR: Can't handle the devices/partitions detected, maybe dd failed or other devices were detected"
  exit 1
fi

echo "Copying the image to the AmpliPi. This takes about 5 minutes. Go get a coffee or something :)"
sudo dd if=$release.img of=$diskpath bs=4MiB
popd # $release

echo "Editing some configuration"
sudo mkdir -p /mnt/pi-boot
sudo mkdir -p /mnt/pi-root
sudo mount ${diskpath}1 /mnt/pi-boot # boot partition
sudo mount ${diskpath}2 /mnt/pi-root # root filesystem partition
pushd /mnt/pi-boot
sudo touch ssh # enable SSH access
popd # /mnt/pi-boot
pushd /mnt/pi-root
echo "# A basic configuration for dhcpcd.
# See dhcpcd.conf(5) for details.

# Inform the DHCP server of our hostname for DDNS.
hostname

# Persist interface configuration when dhcpcd exits.
persistent

# Rapid commit support.
# Safe to enable by default because it requires the equivalent option set
# on the server to actually work.
option rapid_commit

# A list of options to request from the DHCP server.
option domain_name_servers, domain_name, domain_search, host_name
option classless_static_routes
# Respect the network MTU. This is applied to DHCP routes.
option interface_mtu

# Most distributions have NTP support.
#option ntp_servers

# A ServerID is required by RFC2131.
require dhcp_server_identifier

# Generate SLAAC address using the Hardware Address of the interface
#slaac hwaddr
# OR generate Stable Private IPv6 Addresses based from the DUID
slaac private

# Example static IP configuration:
#interface eth0
#static ip_address=192.168.0.101/24
#static ip6_address=fd51:42f8:caae:d92e::ff/64
#static routers=192.168.0.1
#static domain_name_servers=192.168.0.1 8.8.8.8 fd51:42f8:caae:d92e::1

# It is possible to fall back to a static IP if DHCP fails:
define static profile
profile static_eth0
static ip_address=$fallback_ip/24
static routers=192.168.0.1
static domain_name_servers=192.168.1.1

# fallback to static profile on eth0
interface eth0
fallback static_eth0
" | sudo tee etc/dhcpcd.conf > /dev/null # enable dhcp with a backup static ip (no need to reprint to screen)

# set the hostname to amplipi
echo $hostname | sudo tee etc/hostname

# add pi user manually to dialout group, avoiding an additional restart
sudo sed -i'' -r -e 's/dialout:x:([0-9]+:.*)/dialout:x:\1,pi/' -e 's/:,pi/:pi/' -e 's/pi,pi/pi/' etc/group

# copy the pi's boot configuration
sudo cp $amplipi_config_dir/boot_config.txt /mnt/pi-boot/config.txt

# cleanup
popd # /mnt/pi-root
sudo umount /mnt/pi-boot
sudo umount /mnt/pi-root
if [[ -d $release ]] ; then
  rm -r $release/*
fi
popd # /tmp/*

echo "Bootstrapping successful. Please complete the following steps:
  1. Disconnect the service USB cable.
  2. Unplug the AmpliPi unit.
  3. Plug it back in to power it on.
  4. Run the deploy script to install the latest AmpliPi version.
"
