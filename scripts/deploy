#!/bin/bash
# Install AmpliPi software on a remote system

set -e

# get directory that the script exists in
cd "$( dirname "$0" )"

# check if RPI_IP_ADDRESS is set
if [[ -z "${RPI_IP_ADDRESS}" ]]; then
  echo ""
  echo "Please set RPI_IP_ADDRESS, for example:"
  echo -e '\033[1;32mexport RPI_IP_ADDRESS=192.168.0.140\033[0m'
  echo "for ssh key access"
  echo -e '\033[1;32mexport RPI_IP_ADDRESS=pi@192.168.0.140\033[0m'
  echo ""
  exit 1
fi

echo "Deploying amplipi project (development build) to $RPI_IP_ADDRESS"

# TODO: deploy amplipi as a python installed package with pip or something similar
# NOTE: this probably doesnt make sense until we use a more advanced version of poetry or figure out how to not spam the global directory with our scripts and other files?

# set ENABLE_HW flag since this is being deployed to a machine with the actual hardware setup
sed -i 's/DISABLE_HW = True/DISABLE_HW = False/' ../amplipi/rt.py

poetry version prerelease
poetry build

sed -i 's/DISABLE_HW = False/DISABLE_HW = True/' ../amplipi/rt.py

# copy stuff to board
latest_release=$(ls -d -t ../dist/amplipi-*.tar.gz | head --lines=1)
release_name=$(echo $latest_release | sed -e 's@../dist/@@' -e 's/.tar.gz//')
echo "Copying $latest_release to $RPI_IP_ADDRESS"
scp $latest_release $RPI_IP_ADDRESS:
echo "Making development folder on pi"
ssh $RPI_IP_ADDRESS "mkdir -p amplipi-dev"
echo "Extracting folder into $RPI_IP_ADDRESS:~/amplipi-dev"
ssh $RPI_IP_ADDRESS "cd amplipi-dev && tar -xvf ../${release_name}.tar.gz && cp -a ${release_name}/* . && rm -r ${release_name}"
echo "Configuring installation"
ssh $RPI_IP_ADDRESS "chmod +x amplipi-dev/scripts/configure.py"
ssh $RPI_IP_ADDRESS "./amplipi-dev/scripts/configure.py --os-deps --python-deps --web --restart-updater"
