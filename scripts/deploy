#!/bin/bash
# Install AmpliPi software on a remote system

set -e

# get directory that the script exists in
cd "$( dirname "$0" )"

if [[ $# -eq 1 ]] && [[ $1 == '--help' || $1 == '-h' ]] ; then
    echo -e 'deploy USER@HOST\n  Install AmpliPi software on a remote system defined by USER@HOST (default: pi@amplipi.local)'
    exit 0
fi
if [[ $# -eq 1 ]] ; then
    user_host=$1
elif [[ $# -eq 0 ]] ; then
    user_host='pi@amplipi.local'
else
    echo -e "Error: Too many arguments specified.\nUsage:\n"
    echo -e 'deploy USER@HOST\n  Install AmpliPi software on a remote system defined by USER@HOST (default: pi@amplipi.local)'
    exit 1
fi

read -p "Deploying amplipi project (development build) to $user_host, press any key to continue (Ctrl-C to quit)" -n 1

# TODO: deploy amplipi as a python installed package with pip or something similar
# NOTE: this probably doesnt make sense until we use a more advanced version of poetry or figure out how to not spam the global directory with our scripts and other files?

# set ENABLE_HW flag since this is being deployed to a machine with the actual hardware setup
sed -i 's/DISABLE_HW = True/DISABLE_HW = False/' ../amplipi/rt.py

poetry version prerelease
poetry build

sed -i 's/DISABLE_HW = False/DISABLE_HW = True/' ../amplipi/rt.py

# copy stuff to board
latest_release=$(ls -d -t ../dist/amplipi-*.tar.gz | head --lines=1)
release_name=$(echo $latest_release | sed -e 's@../dist/@@' -e 's/.tar.gz//')
echo "Copying $latest_release to $user_host"
scp $latest_release $user_host:
echo "Making development folder on pi"
ssh $user_host "mkdir -p amplipi-dev"
echo "Extracting folder into $user_host:~/amplipi-dev"
ssh $user_host "cd amplipi-dev && tar -xvf ../${release_name}.tar.gz && cp -a ${release_name}/* . && rm -r ${release_name}"
echo "Configuring installation"
ssh $user_host "chmod +x amplipi-dev/scripts/configure.py"
ssh $user_host "./amplipi-dev/scripts/configure.py --os-deps --python-deps --web --restart-updater"
